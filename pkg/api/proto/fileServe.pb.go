// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: fileServe/fileServe.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status int32

const (
	Status_STATUS_UNSPECIFIED Status = 0
	Status_STATUS_SUCCESS     Status = 1
	Status_STATUS_ERROR       Status = 2
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_SUCCESS",
		2: "STATUS_ERROR",
	}
	Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_SUCCESS":     1,
		"STATUS_ERROR":       2,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_fileServe_fileServe_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_fileServe_fileServe_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_fileServe_fileServe_proto_rawDescGZIP(), []int{0}
}

type StatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        Status                 `protobuf:"varint,1,opt,name=status,proto3,enum=proto.Status" json:"status,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	mi := &file_fileServe_fileServe_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fileServe_fileServe_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_fileServe_fileServe_proto_rawDescGZIP(), []int{0}
}

func (x *StatusResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_STATUS_UNSPECIFIED
}

func (x *StatusResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

type FileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileName      string                 `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileRequest) Reset() {
	*x = FileRequest{}
	mi := &file_fileServe_fileServe_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileRequest) ProtoMessage() {}

func (x *FileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fileServe_fileServe_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileRequest.ProtoReflect.Descriptor instead.
func (*FileRequest) Descriptor() ([]byte, []int) {
	return file_fileServe_fileServe_proto_rawDescGZIP(), []int{1}
}

func (x *FileRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type FileResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileName      string                 `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Size          uint64                 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileResponse) Reset() {
	*x = FileResponse{}
	mi := &file_fileServe_fileServe_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileResponse) ProtoMessage() {}

func (x *FileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fileServe_fileServe_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileResponse.ProtoReflect.Descriptor instead.
func (*FileResponse) Descriptor() ([]byte, []int) {
	return file_fileServe_fileServe_proto_rawDescGZIP(), []int{2}
}

func (x *FileResponse) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FileResponse) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type FileChunk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Content       []byte                 `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	FileName      string                 `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileChunk) Reset() {
	*x = FileChunk{}
	mi := &file_fileServe_fileServe_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileChunk) ProtoMessage() {}

func (x *FileChunk) ProtoReflect() protoreflect.Message {
	mi := &file_fileServe_fileServe_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileChunk.ProtoReflect.Descriptor instead.
func (*FileChunk) Descriptor() ([]byte, []int) {
	return file_fileServe_fileServe_proto_rawDescGZIP(), []int{3}
}

func (x *FileChunk) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *FileChunk) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type OperationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Source        string                 `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Destination   string                 `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperationRequest) Reset() {
	*x = OperationRequest{}
	mi := &file_fileServe_fileServe_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationRequest) ProtoMessage() {}

func (x *OperationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fileServe_fileServe_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationRequest.ProtoReflect.Descriptor instead.
func (*OperationRequest) Descriptor() ([]byte, []int) {
	return file_fileServe_fileServe_proto_rawDescGZIP(), []int{4}
}

func (x *OperationRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *OperationRequest) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

type DirectoryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DirectoryRequest) Reset() {
	*x = DirectoryRequest{}
	mi := &file_fileServe_fileServe_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DirectoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectoryRequest) ProtoMessage() {}

func (x *DirectoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fileServe_fileServe_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectoryRequest.ProtoReflect.Descriptor instead.
func (*DirectoryRequest) Descriptor() ([]byte, []int) {
	return file_fileServe_fileServe_proto_rawDescGZIP(), []int{5}
}

func (x *DirectoryRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type DirectoryEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IsDir         bool                   `protobuf:"varint,2,opt,name=is_dir,json=isDir,proto3" json:"is_dir,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DirectoryEntry) Reset() {
	*x = DirectoryEntry{}
	mi := &file_fileServe_fileServe_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DirectoryEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectoryEntry) ProtoMessage() {}

func (x *DirectoryEntry) ProtoReflect() protoreflect.Message {
	mi := &file_fileServe_fileServe_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectoryEntry.ProtoReflect.Descriptor instead.
func (*DirectoryEntry) Descriptor() ([]byte, []int) {
	return file_fileServe_fileServe_proto_rawDescGZIP(), []int{6}
}

func (x *DirectoryEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DirectoryEntry) GetIsDir() bool {
	if x != nil {
		return x.IsDir
	}
	return false
}

type DirectoryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entries       []*DirectoryEntry      `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DirectoryResponse) Reset() {
	*x = DirectoryResponse{}
	mi := &file_fileServe_fileServe_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DirectoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectoryResponse) ProtoMessage() {}

func (x *DirectoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fileServe_fileServe_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectoryResponse.ProtoReflect.Descriptor instead.
func (*DirectoryResponse) Descriptor() ([]byte, []int) {
	return file_fileServe_fileServe_proto_rawDescGZIP(), []int{7}
}

func (x *DirectoryResponse) GetEntries() []*DirectoryEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

var File_fileServe_fileServe_proto protoreflect.FileDescriptor

const file_fileServe_fileServe_proto_rawDesc = "" +
	"\n" +
	"\x19fileServe/fileServe.proto\x12\x05proto\"\\\n" +
	"\x0eStatusResponse\x12%\n" +
	"\x06status\x18\x01 \x01(\x0e2\r.proto.StatusR\x06status\x12#\n" +
	"\rerror_message\x18\x02 \x01(\tR\ferrorMessage\"*\n" +
	"\vFileRequest\x12\x1b\n" +
	"\tfile_name\x18\x01 \x01(\tR\bfileName\"?\n" +
	"\fFileResponse\x12\x1b\n" +
	"\tfile_name\x18\x01 \x01(\tR\bfileName\x12\x12\n" +
	"\x04size\x18\x02 \x01(\x04R\x04size\"B\n" +
	"\tFileChunk\x12\x18\n" +
	"\acontent\x18\x01 \x01(\fR\acontent\x12\x1b\n" +
	"\tfile_name\x18\x02 \x01(\tR\bfileName\"L\n" +
	"\x10OperationRequest\x12\x16\n" +
	"\x06source\x18\x01 \x01(\tR\x06source\x12 \n" +
	"\vdestination\x18\x02 \x01(\tR\vdestination\"&\n" +
	"\x10DirectoryRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\";\n" +
	"\x0eDirectoryEntry\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x15\n" +
	"\x06is_dir\x18\x02 \x01(\bR\x05isDir\"D\n" +
	"\x11DirectoryResponse\x12/\n" +
	"\aentries\x18\x01 \x03(\v2\x15.proto.DirectoryEntryR\aentries*F\n" +
	"\x06Status\x12\x16\n" +
	"\x12STATUS_UNSPECIFIED\x10\x00\x12\x12\n" +
	"\x0eSTATUS_SUCCESS\x10\x01\x12\x10\n" +
	"\fSTATUS_ERROR\x10\x022\xcc\x03\n" +
	"\vFileService\x123\n" +
	"\x06Upload\x12\x10.proto.FileChunk\x1a\x15.proto.StatusResponse(\x01\x122\n" +
	"\bDownload\x12\x12.proto.FileRequest\x1a\x10.proto.FileChunk0\x01\x123\n" +
	"\x06Delete\x12\x12.proto.FileRequest\x1a\x15.proto.StatusResponse\x12.\n" +
	"\x04Read\x12\x12.proto.FileRequest\x1a\x10.proto.FileChunk0\x01\x12:\n" +
	"\rOverwriteFile\x12\x10.proto.FileChunk\x1a\x15.proto.StatusResponse(\x01\x123\n" +
	"\x06Append\x12\x10.proto.FileChunk\x1a\x15.proto.StatusResponse(\x01\x12:\n" +
	"\bMoveFile\x12\x17.proto.OperationRequest\x1a\x15.proto.StatusResponse\x12B\n" +
	"\rListDirectory\x12\x17.proto.DirectoryRequest\x1a\x18.proto.DirectoryResponseB\x11Z\x0f./pkg/api/protob\x06proto3"

var (
	file_fileServe_fileServe_proto_rawDescOnce sync.Once
	file_fileServe_fileServe_proto_rawDescData []byte
)

func file_fileServe_fileServe_proto_rawDescGZIP() []byte {
	file_fileServe_fileServe_proto_rawDescOnce.Do(func() {
		file_fileServe_fileServe_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_fileServe_fileServe_proto_rawDesc), len(file_fileServe_fileServe_proto_rawDesc)))
	})
	return file_fileServe_fileServe_proto_rawDescData
}

var file_fileServe_fileServe_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_fileServe_fileServe_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_fileServe_fileServe_proto_goTypes = []any{
	(Status)(0),               // 0: proto.Status
	(*StatusResponse)(nil),    // 1: proto.StatusResponse
	(*FileRequest)(nil),       // 2: proto.FileRequest
	(*FileResponse)(nil),      // 3: proto.FileResponse
	(*FileChunk)(nil),         // 4: proto.FileChunk
	(*OperationRequest)(nil),  // 5: proto.OperationRequest
	(*DirectoryRequest)(nil),  // 6: proto.DirectoryRequest
	(*DirectoryEntry)(nil),    // 7: proto.DirectoryEntry
	(*DirectoryResponse)(nil), // 8: proto.DirectoryResponse
}
var file_fileServe_fileServe_proto_depIdxs = []int32{
	0,  // 0: proto.StatusResponse.status:type_name -> proto.Status
	7,  // 1: proto.DirectoryResponse.entries:type_name -> proto.DirectoryEntry
	4,  // 2: proto.FileService.Upload:input_type -> proto.FileChunk
	2,  // 3: proto.FileService.Download:input_type -> proto.FileRequest
	2,  // 4: proto.FileService.Delete:input_type -> proto.FileRequest
	2,  // 5: proto.FileService.Read:input_type -> proto.FileRequest
	4,  // 6: proto.FileService.OverwriteFile:input_type -> proto.FileChunk
	4,  // 7: proto.FileService.Append:input_type -> proto.FileChunk
	5,  // 8: proto.FileService.MoveFile:input_type -> proto.OperationRequest
	6,  // 9: proto.FileService.ListDirectory:input_type -> proto.DirectoryRequest
	1,  // 10: proto.FileService.Upload:output_type -> proto.StatusResponse
	4,  // 11: proto.FileService.Download:output_type -> proto.FileChunk
	1,  // 12: proto.FileService.Delete:output_type -> proto.StatusResponse
	4,  // 13: proto.FileService.Read:output_type -> proto.FileChunk
	1,  // 14: proto.FileService.OverwriteFile:output_type -> proto.StatusResponse
	1,  // 15: proto.FileService.Append:output_type -> proto.StatusResponse
	1,  // 16: proto.FileService.MoveFile:output_type -> proto.StatusResponse
	8,  // 17: proto.FileService.ListDirectory:output_type -> proto.DirectoryResponse
	10, // [10:18] is the sub-list for method output_type
	2,  // [2:10] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_fileServe_fileServe_proto_init() }
func file_fileServe_fileServe_proto_init() {
	if File_fileServe_fileServe_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_fileServe_fileServe_proto_rawDesc), len(file_fileServe_fileServe_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fileServe_fileServe_proto_goTypes,
		DependencyIndexes: file_fileServe_fileServe_proto_depIdxs,
		EnumInfos:         file_fileServe_fileServe_proto_enumTypes,
		MessageInfos:      file_fileServe_fileServe_proto_msgTypes,
	}.Build()
	File_fileServe_fileServe_proto = out.File
	file_fileServe_fileServe_proto_goTypes = nil
	file_fileServe_fileServe_proto_depIdxs = nil
}
